#
# Copyright 2017 Red Hat, Inc, and individual contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Used in SyncCircuitBreakerDisabledTest
# https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.healthSnapshot.intervalInMilliseconds
#hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds=10

# Used in BulkheadFallbackRejectTest
hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests=50

# Needed for extreme load in some bulkhead tests
hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize=true
hystrix.threadpool.default.maximumSize=40

# Do not interrupt command execution when a timeout occurs - needed for bulkhead tests
hystrix.command.default.execution.isolation.thread.interruptOnTimeout=false

# Increase timeout for CI and some bulkhead tests
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=3500

# BulkheadAsynchTest.testBulkhead*3 spawns 10 threads, each waiting 5 seconds, and only 3 are allowed
# to run in parallel; that is, at least 5+5+5+5=20 seconds just for the waiting time
hystrix.command.CompositeCommand#org_eclipse_microprofile_fault_tolerance_tck_bulkhead_clientserver_Bulkhead3MethodAsynchronousBean#test(org.eclipse.microprofile.fault.tolerance.tck.bulkhead.clientserver.BackendTestDelegate).execution.isolation.thread.timeoutInMilliseconds=23000
hystrix.command.CompositeCommand#org_eclipse_microprofile_fault_tolerance_tck_bulkhead_clientserver_Bulkhead3ClassAsynchronousBean#test(org.eclipse.microprofile.fault.tolerance.tck.bulkhead.clientserver.BackendTestDelegate).execution.isolation.thread.timeoutInMilliseconds=23000
# BulkheadAsynchTest.testBulkhead*10 spawns 10 threads, each waiting 5 seconds, and all 10 are allowed
# to run in parallel; that is, at least 5 seconds just for the waiting time
hystrix.command.CompositeCommand#org_eclipse_microprofile_fault_tolerance_tck_bulkhead_clientserver_Bulkhead10MethodAsynchronousBean#test(org.eclipse.microprofile.fault.tolerance.tck.bulkhead.clientserver.BackendTestDelegate).execution.isolation.thread.timeoutInMilliseconds=8000
hystrix.command.CompositeCommand#org_eclipse_microprofile_fault_tolerance_tck_bulkhead_clientserver_Bulkhead10ClassAsynchronousBean#test(org.eclipse.microprofile.fault.tolerance.tck.bulkhead.clientserver.BackendTestDelegate).execution.isolation.thread.timeoutInMilliseconds=8000
# BulkheadAsynchTest.testBulkhead*AsynchronousDefault spawns 10 threads, each waiting 5 seconds, and all 10 are allowed
# to run in parallel; that is, at least 5 seconds just for the waiting time
hystrix.command.CompositeCommand#org_eclipse_microprofile_fault_tolerance_tck_bulkhead_clientserver_BulkheadMethodAsynchronousDefaultBean#test(org.eclipse.microprofile.fault.tolerance.tck.bulkhead.clientserver.BackendTestDelegate).execution.isolation.thread.timeoutInMilliseconds=8000
hystrix.command.CompositeCommand#org_eclipse_microprofile_fault_tolerance_tck_bulkhead_clientserver_BulkheadClassAsynchronousDefaultBean#test(org.eclipse.microprofile.fault.tolerance.tck.bulkhead.clientserver.BackendTestDelegate).execution.isolation.thread.timeoutInMilliseconds=8000
# BulkheadAsynchTest.testBulkhead*AsynchronousQueueing10 spawns 20 threads, each waiting 5 seconds, and only 10 are allowed
# to run in parallel; that is, at least 5+5=10 seconds just for the waiting time
hystrix.command.CompositeCommand#org_eclipse_microprofile_fault_tolerance_tck_bulkhead_clientserver_BulkheadMethodAsynchronousQueueingBean#test(org.eclipse.microprofile.fault.tolerance.tck.bulkhead.clientserver.BackendTestDelegate).execution.isolation.thread.timeoutInMilliseconds=13000
hystrix.command.CompositeCommand#org_eclipse_microprofile_fault_tolerance_tck_bulkhead_clientserver_BulkheadClassAsynchronousQueueingBean#test(org.eclipse.microprofile.fault.tolerance.tck.bulkhead.clientserver.BackendTestDelegate).execution.isolation.thread.timeoutInMilliseconds=13000

# BulkheadAsynchRetryTest.testBulkheadRetryClassAsynchronous55 spawns 20 threads, each waiting 1 second, and only 5 are allowed
# to run in parallel; that is, at least 1+1+1+1=4 seconds just for the waiting time
hystrix.command.CompositeCommand#org_eclipse_microprofile_fault_tolerance_tck_bulkhead_clientserver_Bulkhead55ClassAsynchronousRetryBean#test(org.eclipse.microprofile.fault.tolerance.tck.bulkhead.clientserver.BackendTestDelegate).execution.isolation.thread.timeoutInMilliseconds=7000
# BulkheadAsynchRetryTest.testBulkheadMethodAsynchronousRetry55 spawns 20 threads, each waiting 1 second, and only 5 are allowed
# to run in parallel; that is, at least 1+1+1+1=4 seconds just for the waiting time
hystrix.command.CompositeCommand#org_eclipse_microprofile_fault_tolerance_tck_bulkhead_clientserver_Bulkhead55MethodAsynchronousRetryBean#test(org.eclipse.microprofile.fault.tolerance.tck.bulkhead.clientserver.BackendTestDelegate).execution.isolation.thread.timeoutInMilliseconds=7000

# some tests using AsyncCaller (e.g. BulkheadSynchRetryTest) spawn many threads that are not allowed
# to all run in parallel (e.g. 20 threads, each waiting 1 second, and only 5 are allowed to run in parallel)
hystrix.command.CompositeCommand#org_eclipse_microprofile_fault_tolerance_tck_util_AsyncCaller#submit(java.util.concurrent.Callable<T>).execution.isolation.thread.timeoutInMilliseconds=7000
